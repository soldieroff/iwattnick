/*
    Yet Another Graphics library
    Copyright (C) 2014 Andrew Zabolotny All Rights Reserved

    This code can be freely redistributed under the terms of
    GNU General Public License version 3 or later.
*/

#ifndef __GLBC_H__
#define __GLBC_H__

/**
 * @file glbc.h
 *      Layouts use a special bytecode to space-efficiently encode
 *      drawing operations required to display the layout. This file
 *      defines these bytecodes.
 *
 *      It is included from .S files generated by GOC, so anything
 *      that is not understood by the assembler must be enclosed
 *      into an #ifndef __ASSEMBLER__ block.
 *
 *      To make interpreting opcode easier, the opcodes are grouped
 *      by common arguments. The arguments will be collected by common
 *      code and put in common variables.
 */

/// The upper 3 bits will tell us how many arguments we expect
#define LOPA_MASK	0xe0

/// Opcodes starting from this do not have common arguments
#define LOPA_0		0x00
/// Opcodes starting from this will start with one (uleb128) common argument
#define LOPA_U		0x20
/// Opcodes starting from this will start with two (sleb128) common arguments
#define LOPA_SS		0x40
/// Opcodes starting from this will start with four (sleb128) common arguments
#define LOPA_SSSS	0x60

/// Stop interpreting bytecode
#define LOP_END		(LOPA_0 + 0)

/// (color code) set current drawing color
#define LOP_COLOR	(LOPA_U + 0)

/// (x, y) draw a dot
#define LOP_DOT		(LOPA_SS + 0)
/// (x, y, layout) draw another layout
#define LOP_DRAW	(LOPA_SS + 1)
/// (x, y, text) draw a text string
#define LOP_TEXT	(LOPA_SS + 2)

/// (x1, y1, x2, y2) draw a line
#define LOP_LINE	(LOPA_SSSS + 0)
/// (x1, y1, x2, y2) draw a rectangle
#define LOP_RECT	(LOPA_SSSS + 1)
/// (x1, y1, x2, y2) draw a filled box
#define LOP_BOX		(LOPA_SSSS + 2)
/// (x1, y1, x2, y2, menu) display a menu
#define LOP_MENU	(LOPA_SSSS + 3)

#endif // __GLBC_H__
